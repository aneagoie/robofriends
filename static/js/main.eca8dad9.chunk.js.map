{"version":3,"sources":["registerServiceWorker.js","redux/reducers.js","components/Details.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","containers/MainComponent.js","redux/actionCreators.js","redux/actionTypes.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","initialState","searchField","initialStateRobots","isPending","robots","Details","props","myRobot","filter","robot","id","parseInt","style","display","justifyContent","marginRight","alt","src","marginTop","name","address","street","city","phone","email","textAlign","Card","className","textDecoration","to","CardList","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","overflow","border","height","children","App","filteredRobots","toLowerCase","includes","onSearchChange","MainComponent","this","requestingRobots","exact","path","render","params","React","Component","connect","searchRobots","dispatch","event","payload","target","value","fetch","response","json","users","requestRobotsFailed","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.eca8dad9.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_SUCCESS } from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    searchField: \"\"\r\n}\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: \"\"\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestingRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\n\r\n\r\nconst Details = (props) => {\r\n    const myRobot = props.robots.filter((robot) => {\r\n        return robot.id === parseInt(props.id, 10);\r\n    })[0]\r\n    if (myRobot) {\r\n        console.log(myRobot)\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", marginRight: \"200px\" }}>\r\n                <img alt='robots' src={`https://robohash.org/${props.id}?size=300x400`} />\r\n                <div style={{ marginTop: \"100px\" }}>\r\n                    <h3>Hi, my name is {myRobot.name}! </h3>\r\n                    <h3>I live in {myRobot.address.street} street. It's in {myRobot.address.city}! </h3>\r\n                    <h3>If you wanna contact me, my number is {myRobot.phone} </h3>\r\n                    <h3>Or via email, {myRobot.email} </h3>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <h1 style={{ textAlign: \"center\" }}>Loading...</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Details;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <Link style={{textDecoration:\"none\"}} to={`/robots/${id}`}>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n      </Link>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nconst App = (props) => {\r\n\r\n \r\n    \r\n    const filteredRobots = props.robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(props.searchField.toLowerCase());\r\n    })\r\n    return props.isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={props.onSearchChange}/>\r\n          <Scroll>\r\n            <CardList robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n  \r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\"\r\nimport { setSearchField, resquestRobots } from '../redux/actionCreators';\r\nimport { connect } from 'react-redux';\r\nimport Details from \"../components/Details\";\r\nimport App from \"./App\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestingRobots.robots,\r\n        error: state.requestingRobots.error,\r\n        isPending: state.requestingRobots.isPending\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        requestingRobots: () => dispatch(resquestRobots())\r\n    }\r\n}\r\n\r\nclass MainComponent extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.requestingRobots()\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        return (\r\n            <div>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route exact path='/' render={() => <App searchField={searchField} \r\n                            onSearchChange={onSearchChange} isPending={isPending} robots={robots} />} />\r\n                        <Route exact path=\"/robots/:id\" render={({match}) => <Details robots={robots} id={match.params.id}  />} />\r\n                        <Redirect to=\"/\" />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MainComponent);","import {CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_FAILED, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS} from \"./actionTypes\";\r\n\r\nexport const setSearchField = (text) => {\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobotsFailed = (error) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const requestRobotsSuccess = (robots) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: robots\r\n    }\r\n}\r\n\r\nexport const requestRobotsPending = () => {\r\n    return {\r\n        type: REQUEST_ROBOTS_PENDING\r\n    }\r\n}\r\n\r\nexport const resquestRobots = () => (dispatch) => {\r\n    dispatch(requestRobotsPending());\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => dispatch(requestRobotsSuccess(users)))\r\n      .catch(error => dispatch(requestRobotsFailed(error)));\r\n}","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport {Provider} from \"react-redux\";\r\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {createLogger} from \"redux-logger\";\r\nimport { searchRobots, requestingRobots } from './redux/reducers';\r\nimport MainComponent from './containers/MainComponent';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({\r\n    searchRobots, requestingRobots\r\n})\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n            <Provider store={store}>\r\n                <MainComponent />\r\n            </Provider>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}